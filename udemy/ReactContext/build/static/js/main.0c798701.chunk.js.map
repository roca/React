{"version":3,"sources":["middlewares/async.js","middlewares/stateSchema.js","middlewares/stateValidator.js","reducers/index.js","reducers/comments.js","actions/types.js","reducers/auth.js","Root.js","components/requireAuth.js","components/CommentBox.js","actions/CommentBoxActions.js","actions/FetchCommentActions.js","components/CommentList.js","components/App.js","actions/ChangeAuthActions.js","index.js"],"names":["dispatch","next","action","payload","then","response","newAction","$schema","$id","type","title","description","default","examples","comments","auth","required","properties","additionalItems","items","anyOf","additionalProperties","getState","tv4","validate","stateSchema","console","warn","combineReducers","state","data","map","comment","name","children","initialState","store","createStore","reducers","applyMiddleware","async","stateValidator","CommentBox","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","saveComment","onSubmit","this","onChange","id","onClick","fetchComments","Component","connect","axios","get","ChildComponent","ComposedComponent","shouldNavigateAway","history","push","requireAuth","CommentList","className","key","renderComments","App","process","changeAuth","to","renderButton","renderBranch","renderHeader","path","component","exact","isLoggedIn","createBrowserHistory","basename","ReactDOM","render","Root","document","querySelector"],"mappings":"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","file":"static/js/main.0c798701.chunk.js","sourcesContent":["export default ({ dispatch }) => next => action => {\n  /*\n    Check to see if the actions payload is of type Promise()\n    If yes: Wait for it to resolve.\n    If no: Send this action to the next middleware\n   */\n  if (!action.payload || !action.payload.then) {\n    return next(action);\n  }\n  /*\n    Resolve the promise and dispatch a\n    action with its data\n   */\n  action.payload.then(response => {\n    const newAction = { ...action, payload: response };\n    dispatch(newAction);\n  });\n};\n","export default {\n  $schema: \"http://json-schema.org/draft-07/schema\",\n  $id: \"http://example.com/example.json\",\n  type: \"object\",\n  title: \"The root schema\",\n  description: \"The root schema comprises the entire JSON document.\",\n  default: {},\n  examples: [\n    {\n      comments: [\"Comment #1\", \"Comment #2\"],\n      auth: true\n    }\n  ],\n  required: [\"comments\", \"auth\"],\n  properties: {\n    comments: {\n      $id: \"#/properties/comments\",\n      type: \"array\",\n      title: \"The comments schema\",\n      description: \"An explanation about the purpose of this instance.\",\n      default: [],\n      examples: [[\"Comment #1\", \"Comment #2\"]],\n      additionalItems: true,\n      items: {\n        $id: \"#/properties/comments/items\",\n        anyOf: [\n          {\n            $id: \"#/properties/comments/items/anyOf/0\",\n            type: \"string\",\n            title: \"The first anyOf schema\",\n            description: \"An explanation about the purpose of this instance.\",\n            default: \"\",\n            examples: [\"Comment #1\", \"Comment #2\"]\n          }\n        ]\n      }\n    },\n    auth: {\n      $id: \"#/properties/auth\",\n      type: \"boolean\",\n      title: \"The auth schema\",\n      description: \"An explanation about the purpose of this instance.\",\n      default: false,\n      examples: [true]\n    }\n  },\n  additionalProperties: true\n};\n","import tv4 from \"tv4\";\nimport stateSchema from \"./stateSchema\";\n\nexport default ({ dispatch, getState }) => next => action => {\n  next(action);\n\n  if (!tv4.validate(getState(), stateSchema)) {\n    console.warn(\"Invalid state schema detected\");\n  }\n};\n","import { combineReducers } from \"redux\";\nimport commentsReducer from \"reducers/comments\";\nimport authReducer from \"reducers/auth\";\n\nexport default combineReducers({\n  comments: commentsReducer,\n  auth: authReducer\n});\n","import { SAVE_COMMENT, FETCH_COMMENTS } from \"actions/types\";\n\nexport default function (state = [], action) {\n  switch (action.type) {\n    case SAVE_COMMENT:\n      return [...state, action.payload];\n    case FETCH_COMMENTS:\n      const comments = action.payload.data.map(comment => comment.name);\n      return [...state, ...comments];\n    default:\n      return state;\n  }\n}\n","export const SAVE_COMMENT = \"save_comment\";\nexport const FETCH_COMMENTS = \"fetch_comments\";\nexport const CHANGE_AUTH = \"change_auth\";\n","import { CHANGE_AUTH } from \"actions/types\";\n\nexport default function (state = false, action) {\n  switch (action.type) {\n    case CHANGE_AUTH:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\n//import reduxPromise from \"redux-promise\";\n\nimport async from \"middlewares/async\";\nimport stateValidator from \"middlewares/stateValidator\";\nimport { createStore, applyMiddleware } from \"redux\";\n\nimport reducers from \"reducers\";\n\nexport default ({ children, initialState = {} }) => {\n  const store = createStore(reducers, initialState, applyMiddleware(async, stateValidator));\n  return <Provider store={store}>{children}</Provider>;\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nexport default ChildComponent => {\n  class ComposedComponent extends Component {\n    // Out component just got rendered\n    componentDidMount() {\n      this.shouldNavigateAway();\n    }\n    // Out component just got updated\n    componentDidUpdate() {\n      this.shouldNavigateAway();\n    }\n    shouldNavigateAway() {\n      if (!this.props.auth) {\n        this.props.history.push(\"/\");\n      }\n    }\n\n    render() {\n      return <ChildComponent {...this.props} />;\n    }\n  }\n\n  function mapStateToProps(state) {\n    return { auth: state.auth };\n  }\n\n  return connect(mapStateToProps)(ComposedComponent);\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\n// import * as actions from 'actions';\nimport { saveComment, fetchComments } from \"actions\";\nimport requireAuth from \"components/requireAuth\";\n\nclass CommentBox extends Component {\n  state = { comment: \"\" };\n\n  handleChange = event => {\n    this.setState({ comment: event.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    this.props.saveComment(this.state.comment);\n    this.setState({ comment: \"\" });\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <h4>Add a Comment</h4>\n          <textarea onChange={this.handleChange} value={this.state.comment} />\n          <div>\n            <button>Submit Comment</button>\n          </div>\n        </form>\n        <button id=\"fetch-comments\" onClick={this.props.fetchComments}>\n          Fetch Comments\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(null, { saveComment, fetchComments })(requireAuth(CommentBox));\n","import { SAVE_COMMENT } from \"actions/types\";\n\nexport function saveComment(comment) {\n  return {\n    type: SAVE_COMMENT,\n    payload: comment\n  };\n}\n","import axios from \"axios\";\nimport { FETCH_COMMENTS } from \"actions/types\";\n\nexport function fetchComments() {\n  const response = axios.get(\"https://jsonplaceholder.typicode.com/comments\");\n  return {\n    type: FETCH_COMMENTS,\n    payload: response\n  };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass CommentList extends Component {\n  renderComments() {\n    return this.props.comments.map(comment => {\n      return (\n        <li className=\"comments\" key={comment}>\n          {comment}\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>Comment List</h4>\n        <ul>{this.renderComments()}</ul>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { comments: state.comments };\n}\n\nexport default connect(mapStateToProps)(CommentList);\n","import React, { Component } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport CommentBox from \"components/CommentBox\";\nimport CommentList from \"components/CommentList\";\n\n// import * as actions from 'actions';\nimport { changeAuth } from \"actions\";\n\nclass App extends Component {\n  renderBranch() {\n    if (process.env.REACT_APP_GIT_BRANCH !== \"master\") {\n      return <h2>GIT_BRANCH:{process.env.REACT_APP_GIT_BRANCH}</h2>;\n    }\n  }\n  renderButton() {\n    if (this.props.auth) {\n      return (\n        <button id=\"btnSignIn\" onClick={() => this.props.changeAuth(false)}>\n          Sign Out\n        </button>\n      );\n    }\n    return (\n      <button id=\"btnSignIn\" onClick={() => this.props.changeAuth(true)}>\n        Sign In\n      </button>\n    );\n  }\n\n  renderHeader() {\n    return (\n      <div>\n        <ul>\n          <li>\n            <Link id=\"homeLink\" to=\"/\">\n              Home\n            </Link>\n          </li>\n          <li>\n            <Link id=\"postLink\" to=\"/post\">\n              Post a comment\n            </Link>\n          </li>\n          <li>{this.renderButton()}</li>\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderBranch()}\n        {this.renderHeader()}\n        <Route path=\"/post\" component={CommentBox} />\n        <Route path=\"/\" exact component={CommentList} />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { auth: state.auth };\n}\n\nexport default connect(mapStateToProps, { changeAuth })(App);\n","import { CHANGE_AUTH } from \"actions/types\";\n\nexport function changeAuth(isLoggedIn) {\n  return {\n    type: CHANGE_AUTH,\n    payload: isLoggedIn\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport Root from \"Root\";\nimport App from \"components/App\";\nimport { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL\n});\n\nReactDOM.render(\n  <Root>\n    <BrowserRouter>\n      <Route path=\"/\" component={App} />\n    </BrowserRouter>\n  </Root>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}